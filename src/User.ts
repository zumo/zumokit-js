import { Decimal } from 'decimal.js';
import { errorProxy } from './utility';
import {
  CurrencyCode,
  Network,
  AccountType,
  AccountJSON,
  AccountDataSnapshotJSON,
  Address,
  CardType,
  CardStatus,
  CardDetails,
} from './interfaces';
import { Wallet } from './Wallet';
import { ZumoKitError } from './ZumoKitError';
import {
  Account,
  AccountFiatProperties,
  AccountDataSnapshot,
  Card,
  Quote,
} from './models';

/**
 * User instance, obtained via {@link ZumoKit.signIn} method, provides methods for managing user wallet and accounts.
 * <p>
 * Refer to
 * <a href="https://developers.zumo.money/docs/guides/manage-user-wallet">Manage User Wallet</a>,
 * <a href="https://developers.zumo.money/docs/guides/create-fiat-account">Create Fiat Account</a>,
 * <a href="https://developers.zumo.money/docs/guides/view-user-accounts">View User Accounts</a> and
 * <a href="https://developers.zumo.money/docs/guides/get-account-data">Get Account Data</a>
 * guides for usage details.
 */
export class User {
  private userImpl: any;

  private accountDataListeners: Array<
    (state: Array<AccountDataSnapshot>) => void
  > = [];

  private accountDataListenersImpl: Array<any> = [];

  /** User identifier. */
  id: string;

  /** Indicator if user has wallet. */
  hasWallet: boolean;

  /** User accounts. */
  accounts: Array<Account>;

  /** @internal */
  constructor(userImpl: any) {
    this.userImpl = userImpl;
    this.id = userImpl.getId();
    this.hasWallet = userImpl.hasWallet();
    this.accounts = JSON.parse(userImpl.getAccounts()).map(
      (json: AccountJSON) => new Account(json)
    );

    this.addAccountDataListener((snapshots) => {
      this.accounts = snapshots.map((snapshot) => snapshot.account);
    });
  }

  /**
   * Create user wallet seeded by provided mnemonic and encrypted with user's password.
   * <p>
   * Mnemonic can be generated by {@link Utils.generateMnemonic} utility method.
   * @param  mnemonic       mnemonic seed phrase
   * @param  password       user provided password
   */
  createWallet(mnemonic: string, password: string) {
    return errorProxy<Wallet>((resolve: any, reject: any) => {
      this.userImpl.createWallet(
        mnemonic,
        password,
        new window.ZumoCoreModule.WalletCallbackWrapper({
          onError: (error: string) => {
            reject(new ZumoKitError(error));
          },
          onSuccess: (wallet: any) => {
            this.hasWallet = true;
            resolve(new Wallet(wallet));
          },
        })
      );
    });
  }

  /**
   * Recover user wallet with mnemonic seed phrase corresponding to user's wallet.
   * This can be used if user forgets his password or wants to change his wallet password.
   * @param  mnemonic       mnemonic seed phrase corresponding to user's wallet
   * @param  password       user provided password
   */
  recoverWallet(mnemonic: string, password: string) {
    return errorProxy<Wallet>((resolve: any, reject: any) => {
      this.userImpl.recoverWallet(
        mnemonic,
        password,
        new window.ZumoCoreModule.WalletCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(wallet: any) {
            resolve(new Wallet(wallet));
          },
        })
      );
    });
  }

  /**
   * Unlock user wallet with user's password.
   * @param  password       user provided password
   */
  unlockWallet(password: string) {
    return errorProxy<Wallet>((resolve: any, reject: any) => {
      this.userImpl.unlockWallet(
        password,
        new window.ZumoCoreModule.WalletCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(wallet: any) {
            resolve(new Wallet(wallet));
          },
        })
      );
    });
  }

  /**
   * Reveal mnemonic seed phrase used to seed user wallet.
   * @param  password       user provided password
   */
  revealMnemonic(password: string) {
    return errorProxy<string>((resolve: any, reject: any) => {
      this.userImpl.revealMnemonic(
        password,
        new window.ZumoCoreModule.MnemonicCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(mnemonic: string) {
            resolve(mnemonic);
          },
        })
      );
    });
  }

  /**
   * Check if mnemonic seed phrase corresponds to user's wallet.
   * This is useful for validating seed phrase before trying to recover wallet.
   * @param  mnemonic       mnemonic seed phrase
   */
  isRecoveryMnemonic(mnemonic: string): boolean {
    try {
      return this.userImpl.isRecoveryMnemonic(mnemonic);
    } catch (exception) {
      throw new ZumoKitError(window.ZumoCoreModule.getException(exception));
    }
  }

  /**
   * Get account in specific currency, on specific network, with specific type.
   * @param  currencyCode   currency code, e.g. 'BTC', 'ETH' or 'GBP'
   * @param  network        network type, e.g. 'MAINNET', 'TESTNET' or 'RINKEBY'
   * @param  type           account type, e.g. 'STANDARD', 'COMPATIBILITY' or 'SEGWIT'
   */
  getAccount(currencyCode: CurrencyCode, network: Network, type: AccountType) {
    const account = this.userImpl.getAccount(currencyCode, network, type);
    if (account.hasValue()) return new Account(JSON.parse(account.get()));
    return null;
  }

  /**
   * Check if user is a fiat customer on 'MAINNET' or 'TESTNET' network.
   * @param  network 'MAINNET' or 'TESTNET'
   */
  isFiatCustomer(network: string): boolean {
    return this.userImpl.isFiatCustomer(network);
  }

  /**
   * Make user fiat customer on specified network by providing user's personal details.
   * @param  network        'MAINNET' or 'TESTNET'
   * @param  firstName       first name
   * @param  middleName      middle name or null
   * @param  lastName        last name
   * @param  dateOfBirth     date of birth in ISO 8601 format, e.g '2020-08-12'
   * @param  email           email
   * @param  phone           phone number
   * @param  address         home address
   */
  makeFiatCustomer(
    network: Network,
    firstName: string,
    middleName: string | null,
    lastName: string,
    dateOfBirth: string,
    email: string,
    phone: string,
    address: Address
  ) {
    return errorProxy<void>((resolve: any, reject: any) => {
      const optionalMiddleName = new window.ZumoCoreModule.OptionalString();
      if (middleName) optionalMiddleName.set(middleName);

      this.userImpl.makeFiatCustomer(
        network,
        firstName,
        optionalMiddleName,
        lastName,
        dateOfBirth,
        email,
        phone,
        JSON.stringify(address),
        new window.ZumoCoreModule.SuccessCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess() {
            resolve();
          },
        })
      );
    });
  }

  /**
   * Create fiat account on specified network and currency code. User must already be fiat customer on specified network.
   * @param  network       'MAINNET' or 'TESTNET'
   * @param  currencyCode  country code in ISO 4217 format, e.g. 'GBP'
   */
  createFiatAccount(network: Network, currencyCode: CurrencyCode) {
    return errorProxy<Account>((resolve: any, reject: any) => {
      this.userImpl.createFiatAccount(
        network,
        currencyCode,
        new window.ZumoCoreModule.AccountCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(account: string) {
            resolve(new Account(JSON.parse(account)));
          },
        })
      );
    });
  }

  /**
   * Get nominated account details for specified account if it exists.
   * Refer to
   * <a href="https://developers.zumo.money/docs/guides/send-transactions#bitcoin">Create Fiat Account</a>
   * for explanation about nominated account.
   * @param  accountId     {@link Account Account} identifier
   */
  getNominatedAccountFiatProperties(accountId: string) {
    return errorProxy<AccountFiatProperties | null>((resolve: any) => {
      this.userImpl.getNominatedAccountFiatProperties(
        accountId,
        new window.ZumoCoreModule.AccountFiatPropertiesCallbackWrapper({
          onError() {
            resolve(null);
          },
          onSuccess(accountFiatProperties: string) {
            resolve(
              new AccountFiatProperties(JSON.parse(accountFiatProperties))
            );
          },
        })
      );
    });
  }

  /**
   * Create card for a fiat account.
   * @param  fiatAccountId fiat {@link Account account} identifier
   * @param  cardType       'VIRTUAL' or 'PHYSICAL'
   * @param  mobileNumber   card holder mobile number, starting with a '+', followed by the country code and then the mobile number, or null
   */
  createCard(
    fiatAccountId: string,
    cardType: CardType,
    mobileNumber: string
  ) {
    return errorProxy<void>((resolve: any, reject: any) => {
      this.userImpl.createCard(
        fiatAccountId,
        cardType,
        mobileNumber,
        new window.ZumoCoreModule.CardCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(card: string) {
            resolve(new Card(JSON.parse(card)));
          },
        })
      );
    });
  }

  /**
   * Set card status to 'ACTIVE', 'BLOCKED' or 'CANCELLED'.
   * - To block card, set card status to 'BLOCKED'.
   * - To activate a physical card, set card status to 'ACTIVE' and provide PAN and CVC2 fields.
   * - To cancel a card, set card status to 'CANCELLED'.
   * - To unblock a card, set card status to 'ACTIVE.'.
   * @param  cardId        {@link Card card}  identifier
   * @param  cardStatus    new card status
   * @param  pan           PAN when activating a physical card, null otherwise (defaults to null)
   * @param  cvv2          CVV2 when activating a physical card, null otherwise (defaults to null)
   */
  setCardStatus(
    cardId: string,
    cardStatus: CardStatus,
    pan: string | null = null,
    cvv2: string | null = null
  ) {
    return errorProxy<void>((resolve: any, reject: any) => {
      const optionalPan = new window.ZumoCoreModule.OptionalString();
      if (pan) optionalPan.set(pan);

      const optionalCvv2 = new window.ZumoCoreModule.OptionalString();
      if (cvv2) optionalCvv2.set(cvv2);

      this.userImpl.setCardStatus(
        cardId,
        cardStatus,
        optionalPan,
        optionalCvv2,
        new window.ZumoCoreModule.SuccessCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess() {
            resolve();
          },
        })
      );
    });
  }

  /**
   * Reveals sensitive card details.
   * @param  cardId        card identifier
   */
  revealCardDetails(cardId: string) {
    return errorProxy<void>((resolve: any, reject: any) => {
      this.userImpl.revealCardDetails(
        cardId,
        new window.ZumoCoreModule.CardDetailsCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(cardDetails: string) {
            resolve(JSON.parse(cardDetails) as CardDetails);
          },
        })
      );
    });
  }

  /**
   * Reveal card PIN.
   * @param  cardId        {@link Card card} identifier
   */
  revealPin(cardId: string) {
    return errorProxy<void>((resolve: any, reject: any) => {
      this.userImpl.revealPin(
        cardId,
        new window.ZumoCoreModule.PinCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(pin: number) {
            resolve(pin);
          },
        })
      );
    });
  }

  /**
   * Unblock card PIN.
   * @param  cardId        {@link Card card} identifier
   */
  unblockPin(cardId: string) {
    return errorProxy<void>((resolve: any, reject: any) => {
      this.userImpl.unblockPin(
        cardId,
        new window.ZumoCoreModule.SuccessCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess() {
            resolve();
          },
        })
      );
    });
  }

  /**
   * Get exchange rate quote.
   * @param fromCurrency  deposit currency code
   * @param toCurrency    target currency code
   * @param depositAmount deposit amount to be exchanged to target currency
   */
  getQuote(
    fromCurrency: CurrencyCode,
    toCurrency: CurrencyCode,
    depositAmount: Decimal
  ) {
    return errorProxy<void>((resolve: any, reject: any) => {
      this.userImpl.getQuote(
        fromCurrency,
        toCurrency,
        new window.ZumoCoreModule.Decimal(depositAmount.toString()),
        new window.ZumoCoreModule.QuoteCallbackWrapper({
          onError(error: string) {
            reject(new ZumoKitError(error));
          },
          onSuccess(quote: string) {
            resolve(new Quote(JSON.parse(quote)));
          },
        })
      );
    });
  }

  /**
   * Listen to all account data changes.
   *
   * @param listener interface to listen to user changes
   */
  addAccountDataListener(
    listener: (snapshots: Array<AccountDataSnapshot>) => void
  ) {
    const listenerImpl = new window.ZumoCoreModule.AccountDataListenerWrapper({
      onDataChange(snapshots: string) {
        listener(
          JSON.parse(snapshots).map(
            (json: AccountDataSnapshotJSON) => new AccountDataSnapshot(json)
          )
        );
      },
    });

    this.userImpl.addAccountDataListener(listenerImpl);

    this.accountDataListeners.push(listener);
    this.accountDataListenersImpl.push(listenerImpl);
  }

  /**
   * Remove listener to state changes.
   *
   * @param listener interface to listen to state changes
   */
  removeAccountDataListener(
    listener: (snapshots: Array<AccountDataSnapshot>) => void
  ) {
    let index;
    // eslint-disable-next-line no-cond-assign
    while ((index = this.accountDataListeners.indexOf(listener)) !== -1) {
      this.accountDataListeners.splice(index, 1);
      this.userImpl.removeAccountDataListener(
        this.accountDataListenersImpl.splice(index, 1)[0]
      );
    }
  }
}
